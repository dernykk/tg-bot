    import logging
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
    from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, ConversationHandler, MessageHandler, Filters, \
        CallbackContext
    import sqlite3
    from datetime import datetime, timedelta

    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
    )
    logger = logging.getLogger(__name__)

    NICKNAME, GAME, RANK, DESCRIPTION, EDITING = range(5)
    MAIN_MENU_BUTTON = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('allies.db', check_same_thread=False)
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            game TEXT,
            rank TEXT,
            description TEXT,
            is_searching BOOLEAN DEFAULT FALSE,
            is_banned BOOLEAN DEFAULT FALSE,
            ban_end DATETIME
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS invites (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            from_user_id INTEGER,
            to_user_id INTEGER,
            status TEXT DEFAULT 'pending',
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY(from_user_id) REFERENCES users(user_id),
            FOREIGN KEY(to_user_id) REFERENCES users(user_id)
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS reports (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            reported_user_id INTEGER,
            reporter_user_id INTEGER,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY(reported_user_id) REFERENCES users(user_id),
            FOREIGN KEY(reporter_user_id) REFERENCES users(user_id)
        )
    ''')
    conn.commit()


    def main_menu_markup():
        return ReplyKeyboardMarkup([[MAIN_MENU_BUTTON]], resize_keyboard=True, one_time_keyboard=False)


    def has_profile(user_id: int) -> bool:
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        return cursor.fetchone() is not None


    def show_main_menu(update: Update, context: CallbackContext) -> None:
        user = update.message.from_user if update.message else update.callback_query.from_user
        chat_id = update.effective_chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
        cursor.execute('SELECT is_banned, ban_end FROM users WHERE user_id = ?', (user.id,))
        user_data = cursor.fetchone()
        if user_data and user_data[0]:  # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            ban_end = datetime.strptime(user_data[1], "%Y-%m-%d %H:%M:%S")
            if datetime.now() > ban_end:
                # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
                cursor.execute('UPDATE users SET is_banned = FALSE, ban_end = NULL WHERE user_id = ?', (user.id,))
                conn.commit()
                context.bot.send_message(
                    chat_id=chat_id,
                    text="‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ—é–∑–Ω–∏–∫–æ–≤.",
                    reply_markup=main_menu_markup()
                )
            else:
                context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚õî –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {user_data[1]}. –ü—Ä–∏—á–∏–Ω–∞: –ø–æ–ª—É—á–µ–Ω–æ –º–Ω–æ–≥–æ –∂–∞–ª–æ–±.",
                    reply_markup=main_menu_markup()
                )
                return

        if has_profile(user.id):
            keyboard = [
                [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫", callback_data='resume_search')],
                [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data='edit_profile'),
                 InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫", callback_data='stop_search')],
                [InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –∏–Ω–≤–∞–π—Ç–æ–≤", callback_data='invite_history'),
                 InlineKeyboardButton("–ú–æ—è –∞–Ω–∫–µ—Ç–∞", callback_data='show_my_profile')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            context.bot.send_message(
                chat_id=chat_id,
                text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=main_menu_markup()
            )
            context.bot.send_message(
                chat_id=chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        else:
            keyboard = [[InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data='create_profile')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            context.bot.send_message(
                chat_id=chat_id,
                text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã!",
                reply_markup=main_menu_markup()
            )
            context.bot.send_message(
                chat_id=chat_id,
                text="–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã:",
                reply_markup=reply_markup
            )


    def start(update: Update, context: CallbackContext) -> None:
        user = update.message.from_user
        show_main_menu(update, context)


    def main_menu_handler(update: Update, context: CallbackContext):
        if update.message.text == MAIN_MENU_BUTTON:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ª—é–±—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
            if context.user_data.get('editing'):
                context.user_data.clear()
                update.message.reply_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

            show_main_menu(update, context)
            return ConversationHandler.END


    def create_profile(update: Update, context: CallbackContext) -> int:
        query = update.callback_query
        query.answer()
        query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º:",
            reply_markup=main_menu_markup()
        )
        return NICKNAME


    def nickname(update: Update, context: CallbackContext) -> int:
        context.user_data['nickname'] = update.message.text
        update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:",
            reply_markup=main_menu_markup()
        )
        return GAME


    def game(update: Update, context: CallbackContext) -> int:
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        if context.user_data.get('editing'):
            new_game = update.message.text
            user_id = update.message.from_user.id

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
            cursor.execute('''
                UPDATE users 
                SET game = ?
                WHERE user_id = ?
            ''', (new_game, user_id))
            conn.commit()

            update.message.reply_text(
                "‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
                reply_markup=main_menu_markup()
            )
            show_main_menu(update, context)
            context.user_data.clear()
            return ConversationHandler.END
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        else:
            context.user_data['game'] = update.message.text
            update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–∞–Ω–≥ –≤ –∏–≥—Ä–µ:",
                reply_markup=main_menu_markup()
            )
            return RANK


    def rank(update: Update, context: CallbackContext) -> int:
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        if context.user_data.get('editing'):
            new_rank = update.message.text
            user_id = update.message.from_user.id

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
            cursor.execute('''
                UPDATE users 
                SET rank = ?
                WHERE user_id = ?
            ''', (new_rank, user_id))
            conn.commit()

            update.message.reply_text(
                "‚úÖ –†–∞–Ω–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
                reply_markup=main_menu_markup()
            )
            show_main_menu(update, context)
            context.user_data.clear()
            return ConversationHandler.END
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        else:
            context.user_data['rank'] = update.message.text
            update.message.reply_text(
                "–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ –∏ –∫–æ–≥–æ –∏—â–µ—Ç–µ:",
                reply_markup=main_menu_markup()
            )
            return DESCRIPTION


    def description(update: Update, context: CallbackContext) -> int:
        user = update.message.from_user

        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        if context.user_data.get('editing'):
            new_description = update.message.text

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
            cursor.execute('''
                UPDATE users 
                SET description = ?
                WHERE user_id = ?
            ''', (new_description, user.id))
            conn.commit()

            update.message.reply_text(
                "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                reply_markup=main_menu_markup()
            )
            show_main_menu(update, context)
            context.user_data.clear()
            return ConversationHandler.END
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        else:
            context.user_data['description'] = update.message.text

            cursor.execute('''
                INSERT OR REPLACE INTO users 
                (user_id, username, game, rank, description, is_searching)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                user.id,
                user.username,
                context.user_data['game'],
                context.user_data['rank'],
                context.user_data['description'],
                True
            ))
            conn.commit()

            update.message.reply_text(
                "–ê–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫...",
                reply_markup=main_menu_markup()
            )
            show_next_profile(update, context, user.id)
            return ConversationHandler.END


    def cancel(update: Update, context: CallbackContext) -> int:
        update.message.reply_text(
            '–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ',
            reply_markup=main_menu_markup()
        )
        return ConversationHandler.END


    def show_my_profile(update: Update, context: CallbackContext, user_id: int) -> None:
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        profile = cursor.fetchone()

        if profile:
            profile_text = f"""
            –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:
            üéÆ –ò–≥—Ä–∞: {profile[2]}
            üë§ –ù–∏–∫–Ω–µ–π–º: {profile[1]}
            üèÜ –†–∞–Ω–≥: {profile[3]}
            üìù –û–ø–∏—Å–∞–Ω–∏–µ: {profile[4]}
            """
            context.bot.send_message(
                chat_id=user_id,
                text=profile_text,
                reply_markup=main_menu_markup()
            )
        else:
            context.bot.send_message(
                chat_id=user_id,
                text="–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã!",
                reply_markup=main_menu_markup()
            )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
        show_main_menu(update, context)


    def show_next_profile(update: Update, context: CallbackContext, user_id: int, offset: int = 0) -> None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute('SELECT is_banned FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        if result and result[0]:
            context.bot.send_message(
                chat_id=user_id,
                text="‚õî –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ—é–∑–Ω–∏–∫–æ–≤.",
                reply_markup=main_menu_markup()
            )
            return

        cursor.execute('''
            SELECT * FROM users 
            WHERE game = (SELECT game FROM users WHERE user_id = ?)
            AND is_searching = TRUE
            AND is_banned = FALSE
            AND user_id != ?
            LIMIT 1 OFFSET ?
        ''', (user_id, user_id, offset))
        profile = cursor.fetchone()

        chat_id = update.effective_chat.id
        message = None

        if isinstance(update, Update) and update.message:
            message = update.message
        elif update.callback_query and update.callback_query.message:
            message = update.callback_query.message

        if profile:
            profile_text = f"""
            üéÆ –ò–≥—Ä–∞: {profile[2]}
            üë§ –ù–∏–∫–Ω–µ–π–º: {profile[1]}
            üèÜ –†–∞–Ω–≥: {profile[3]}
            üìù –û–ø–∏—Å–∞–Ω–∏–µ: {profile[4]}
            """
            keyboard = [
                [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞", callback_data=f'next_{offset + 1}')],
                [
                    InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data=f'invite_{profile[0]}'),
                    InlineKeyboardButton("–ü–µ—Ä–µ—Å—Ç–∞—Ç—å –∏—Å–∫–∞—Ç—å", callback_data='stop_search')
                ],
                [
                    InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data='edit_profile'),
                    InlineKeyboardButton("–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f'report_{profile[0]}')
                ]
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)
            if message:
                message.reply_text(profile_text, reply_markup=reply_markup)
            else:
                context.bot.send_message(chat_id, profile_text, reply_markup=reply_markup)
        else:
            text = "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            reply_markup = main_menu_markup()
            if message:
                message.reply_text(text, reply_markup=reply_markup)
            else:
                context.bot.send_message(chat_id, text, reply_markup=reply_markup)


    def show_invite_history(user_id: int) -> str:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤
        cursor.execute('''
            SELECT u.username, i.status 
            FROM invites i
            JOIN users u ON i.to_user_id = u.user_id
            WHERE i.from_user_id = ?
        ''', (user_id,))
        sent_invites = cursor.fetchall()

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤
        cursor.execute('''
            SELECT u.username, i.status 
            FROM invites i
            JOIN users u ON i.from_user_id = u.user_id
            WHERE i.to_user_id = ?
        ''', (user_id,))
        received_invites = cursor.fetchall()

        history_text = "üìù –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∏–Ω–≤–∞–π—Ç–æ–≤ üéÆ:\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–Ω–≤–∞–π—Ç—ã
        for username, status in sent_invites:
            status_text = "‚úÖ –ü—Ä–∏–Ω—è—Ç–∞ ‚úÖ" if status == 'accepted' else "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå"
            history_text += f"–í—ã --> {username} ({status_text})\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–Ω–≤–∞–π—Ç—ã
        for username, status in received_invites:
            status_text = "‚úÖ –ü—Ä–∏–Ω—è—Ç–∞ ‚úÖ" if status == 'accepted' else "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå"
            history_text += f"{username} --> –í—ã ({status_text})\n"

        if not sent_invites and not received_invites:
            history_text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∏–Ω–≤–∞–π—Ç–æ–≤."

        return history_text


    def report_user(reported_user_id: int, reporter_user_id: int):
        # –î–æ–±–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—É –≤ –±–∞–∑—É
        cursor.execute('''
            INSERT INTO reports (reported_user_id, reporter_user_id)
            VALUES (?, ?)
        ''', (reported_user_id, reporter_user_id))
        conn.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±
        cursor.execute('SELECT COUNT(*) FROM reports WHERE reported_user_id = ?', (reported_user_id,))
        report_count = cursor.fetchone()[0]

        if report_count >= 5:
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏
            ban_end = datetime.now() + timedelta(days=14)
            cursor.execute('''
                UPDATE users 
                SET is_banned = TRUE, ban_end = ?, is_searching = FALSE
                WHERE user_id = ?
            ''', (ban_end.strftime("%Y-%m-%d %H:%M:%S"), reported_user_id))
            conn.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
            return True, ban_end

        return False, None


    def button_handler(update: Update, context: CallbackContext) -> None:
        query = update.callback_query
        query.answer()
        user_id = query.from_user.id
        data = query.data

        if data == 'main_menu':
            show_main_menu(update, context)
            return

        if data.startswith('next_'):
            offset = int(data.split('_')[1])
            show_next_profile(update, context, user_id, offset)

        elif data == 'stop_search':
            cursor.execute('UPDATE users SET is_searching = FALSE WHERE user_id = ?', (user_id,))
            conn.commit()
            # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            query.edit_message_text(
                "–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
                reply_markup=None  # –í–∞–∂–Ω–æ: —É–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            show_main_menu(update, context)

        elif data == 'resume_search':
            cursor.execute('UPDATE users SET is_searching = TRUE WHERE user_id = ?', (user_id,))
            conn.commit()
            show_next_profile(update, context, user_id, 0)

        elif data == 'edit_profile':
            keyboard = [
                [InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –∏–≥—Ä—É", callback_data='change_game')],
                [InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data='change_description')],
                [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–Ω–≥", callback_data='change_rank')],
                [InlineKeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='create_profile')]
            ]
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º reply_text –≤–º–µ—Å—Ç–æ edit_message_text
            context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

        elif data == 'show_my_profile':
            query.edit_message_text(
                "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:",
                reply_markup=None
            )
            show_my_profile(update, context, user_id)

        elif data.startswith('report_'):
            reported_user_id = int(data.split('_')[1])
            is_banned, ban_end = report_user(reported_user_id, user_id)

            if is_banned:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context.bot.send_message(
                    chat_id=reported_user_id,
                    text=f"‚õî –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {ban_end.strftime('%Y-%m-%d %H:%M:%S')} "
                         "–∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∞–ª–æ–±."
                )
                query.edit_message_text(
                    "‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∞–ª–æ–±.",
                    reply_markup=None
                )
            else:
                query.edit_message_text(
                    "‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –±–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.",
                    reply_markup=None
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            show_main_menu(update, context)

        elif data.startswith('invite_'):
            to_user_id = int(data.split('_')[1])
            cursor.execute('''
                SELECT * FROM invites 
                WHERE from_user_id = ? AND to_user_id = ? 
                AND status = 'pending'
            ''', (user_id, to_user_id))
            if cursor.fetchone():
                # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                query.edit_message_text(
                    "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!",
                    reply_markup=None  # –í–∞–∂–Ω–æ: —É–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                show_main_menu(update, context)
                return

            cursor.execute('''
                INSERT INTO invites (from_user_id, to_user_id)
                VALUES (?, ?)
            ''', (user_id, to_user_id))
            conn.commit()

            cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
            inviter = cursor.fetchone()

            invite_text = f"""
            üéâ –¢–µ–±–µ –ø—Ä–∏—à–ª–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!
            üéÆ –ò–≥—Ä–∞: {inviter[2]}
            üë§ –ù–∏–∫–Ω–µ–π–º: {inviter[1]}
            üèÜ –†–∞–Ω–≥: {inviter[3]}
            üìù –û–ø–∏—Å–∞–Ω–∏–µ: {inviter[4]}
            """
            keyboard = [
                [
                    InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f'accept_{user_id}'),
                    InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'decline_{user_id}')
                ],
                [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
            ]

            context.bot.send_message(
                chat_id=to_user_id,
                text=invite_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

            # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            query.edit_message_text(
                "‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
                reply_markup=None  # –í–∞–∂–Ω–æ: —É–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            show_main_menu(update, context)

        elif data.startswith('accept_'):
            from_user_id = int(data.split('_')[1])
            cursor.execute('''
                UPDATE invites SET status = 'accepted'
                WHERE from_user_id = ? AND to_user_id = ?
            ''', (from_user_id, user_id))
            conn.commit()

            cursor.execute('SELECT * FROM users WHERE user_id IN (?, ?)', (from_user_id, user_id))
            users = {row[0]: row for row in cursor.fetchall()}

            for u_id in [from_user_id, user_id]:
                partner_id = user_id if u_id == from_user_id else from_user_id
                partner_username = users[partner_id][1]
                if partner_username:
                    link = f"https://t.me/{partner_username}"
                    text = f"üéâ –í–∑–∞–∏–º–Ω—ã–π –∏–Ω–≤–∞–π—Ç! –°–≤—è–∂–∏—Å—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º: {link}"
                else:
                    text = f"üéâ –í–∑–∞–∏–º–Ω—ã–π –∏–Ω–≤–∞–π—Ç! –ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –∏–º–µ–µ—Ç username. ID –¥–ª—è —Å–≤—è–∑–∏: {partner_id}"

                context.bot.send_message(
                    chat_id=u_id,
                    text=text,
                    reply_markup=main_menu_markup()
                )

            # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            query.edit_message_text(
                "‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å!",
                reply_markup=None  # –í–∞–∂–Ω–æ: —É–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            show_main_menu(update, context)

        elif data.startswith('decline_'):
            from_user_id = int(data.split('_')[1])
            cursor.execute('''
                UPDATE invites SET status = 'rejected'
                WHERE from_user_id = ? AND to_user_id = ?
            ''', (from_user_id, user_id))
            conn.commit()
            # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            query.edit_message_text(
                "‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å.",
                reply_markup=None  # –í–∞–∂–Ω–æ: —É–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            show_main_menu(update, context)

        query.answer()


    def edit_game(update: Update, context: CallbackContext) -> int:
        query = update.callback_query
        query.answer()
        context.user_data['editing'] = True
        query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É:",
            reply_markup=main_menu_markup()
        )
        return GAME


    def edit_rank(update: Update, context: CallbackContext) -> int:
        query = update.callback_query
        query.answer()
        context.user_data['editing'] = True
        query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–Ω–≥:",
            reply_markup=main_menu_markup()
        )
        return RANK


    def edit_description(update: Update, context: CallbackContext) -> int:
        query = update.callback_query
        query.answer()
        context.user_data['editing'] = True
        query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
            reply_markup=main_menu_markup()
        )
        return DESCRIPTION


    def main() -> None:
        updater = Updater("8196066669:AAHuIaa6zdac51tCUf4zwlw282vj-_SzPac")
        dispatcher = updater.dispatcher

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º
        dispatcher.add_handler(MessageHandler(Filters.regex(f'^{MAIN_MENU_BUTTON}$'), main_menu_handler))
        dispatcher.add_handler(CommandHandler('start', start))

        # ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        create_profile_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(create_profile, pattern='^create_profile$')],
            states={
                NICKNAME: [
                    MessageHandler(Filters.text & ~Filters.command, nickname),
                    MessageHandler(Filters.regex(f'^{MAIN_MENU_BUTTON}$'), main_menu_handler)
                ],
                GAME: [
                    MessageHandler(Filters.text & ~Filters.command, game),
                    MessageHandler(Filters.regex(f'^{MAIN_MENU_BUTTON}$'), main_menu_handler)
                ],
                RANK: [
                    MessageHandler(Filters.text & ~Filters.command, rank),
                    MessageHandler(Filters.regex(f'^{MAIN_MENU_BUTTON}$'), main_menu_handler)
                ],
                DESCRIPTION: [
                    MessageHandler(Filters.text & ~Filters.command, description),
                    MessageHandler(Filters.regex(f'^{MAIN_MENU_BUTTON}$'), main_menu_handler)
                ]
            },
            fallbacks=[
                CommandHandler('cancel', cancel),
                MessageHandler(Filters.regex(f'^{MAIN_MENU_BUTTON}$'), main_menu_handler),
                CommandHandler('start', start)
            ]
        )

        # ConversationHandler –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        edit_profile_handler = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(edit_game, pattern='^change_game$'),
                CallbackQueryHandler(edit_rank, pattern='^change_rank$'),
                CallbackQueryHandler(edit_description, pattern='^change_description$')
            ],
            states={
                GAME: [
                    MessageHandler(Filters.text & ~Filters.command, game),
                    MessageHandler(Filters.regex(f'^{MAIN_MENU_BUTTON}$'), main_menu_handler)
                ],
                RANK: [
                    MessageHandler(Filters.text & ~Filters.command, rank),
                    MessageHandler(Filters.regex(f'^{MAIN_MENU_BUTTON}$'), main_menu_handler)
                ],
                DESCRIPTION: [
                    MessageHandler(Filters.text & ~Filters.command, description),
                    MessageHandler(Filters.regex(f'^{MAIN_MENU_BUTTON}$'), main_menu_handler)
                ]
            },
            fallbacks=[
                CommandHandler('cancel', cancel),
                MessageHandler(Filters.regex(f'^{MAIN_MENU_BUTTON}$'), main_menu_handler),
                CommandHandler('start', start)
            ]
        )

        dispatcher.add_handler(create_profile_handler)
        dispatcher.add_handler(edit_profile_handler)
        dispatcher.add_handler(CallbackQueryHandler(button_handler))

        updater.start_polling()
        updater.idle()


    if __name__ == '__main__':
        main()